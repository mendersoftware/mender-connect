stages:
  - test_prep
  - test
  - build
  - publish
  - trigger_prep
  - trigger

include:
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-lint.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-golang-unittests.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-commits.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-check-license.yml'
  - project: 'Northern.tech/Mender/mendertesting'
    file: '.gitlab-ci-github-status-updates.yml'

test:unit:
  stage: test
  script:
    # start the dbus service
    - service dbus start
    # original from the gitlab-ci-check-golang-unittests.yml template
    - go list ./... | grep -v vendor | xargs -n1 -I {} go test -v -covermode=atomic -coverprofile=../../../{}/coverage.txt {} 2>&1 | tee /dev/stderr | go-junit-report > ${CI_PROJECT_DIR}/test-results.xml || exit $?
    - mkdir -p tests/unit-coverage && find . -name 'coverage.txt' -exec cp --parents {} ./tests/unit-coverage \;
    - tar -cvf ${CI_PROJECT_DIR}/unit-coverage.tar tests/unit-coverage

build:make:
  stage: build
  needs: []
  image: golang:1.23-alpine
  before_script:
    - apk add --update git make gcc pkgconfig libc-dev glib-dev
  script:
    - make build

# Test that we can build with the golang version of the oldest supported yocto LTS release
test:backwards-compatibility:
  image: golang:1.17.13-bullseye
  needs: []
  before_script:
    - apt-get update && apt-get install --quiet --assume-yes $(cat deb-requirements.txt )
  script:
    - go build

generate-qa-trigger:
  image: python:alpine
  stage: trigger_prep
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|[0-9]+\.[0-9]+\.x)$/'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
  before_script:
    - apk add --no-cache git
    - pip3 install pyyaml
    - wget -q https://raw.githubusercontent.com/mendersoftware/mender-qa/master/scripts/generate_client_publish_job.py
  script:
    - python generate_client_publish_job.py --trigger ${CI_PROJECT_NAME} --version ${CI_COMMIT_REF_NAME} --filename gitlab-ci-client-qemu-publish-job.yml
  artifacts:
    paths:
      - gitlab-ci-client-qemu-publish-job.yml

trigger:mender-qa:
  stage: trigger
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(master|[0-9]+\.[0-9]+\.x)$/'
    # the following is to prevent an endless loop of qa pipelines caused by downstream pipelines
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
  trigger:
    include:
      - artifact: gitlab-ci-client-qemu-publish-job.yml
        job: generate-qa-trigger

trigger:integration:
  stage: trigger
  inherit:
    variables: false
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_PIPELINE_SOURCE == "pipeline"'
      when: never
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: never
  trigger:
    project: Northern.tech/Mender/integration
    branch: master
